<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TestTask</name>
    </assembly>
    <members>
        <member name="M:TestApplication.Controllers.AuthController.Login(System.String)">
             <summary>
             Generate an authentication token.
             </summary>
             <param name="email">The email of the user to log in.</param>
             <remarks>
             Sample request:
            
                 GET /api/users/login?email=johndoe@example.com
             </remarks>
             <returns>An authentication token if the login is successful.</returns>
             <response code="200">Authentication token generated successfully.</response>
             <response code="404">User with the provided email not found.</response>
        </member>
        <member name="M:TestApplication.Controllers.UserController.CreateUser(TestApplication.DTO.CreateUserRequest)">
             <summary>
             Create a new user.
             </summary>
             <param name="request">Request to create a user.</param>
             <remarks>
             Sample request:
            
                 POST /api/users/create
                 {
                     "name": "John Doe",
                     "email": "johndoe@example.com",
                     "age": 30
                 }
            
             </remarks>
             <returns>Result of user creation.</returns>
             <response code="200">User created successfully.</response>
             <response code="400">User with the same email already exists or the age is less than zero.</response>
             <response code="500">An error occurred while creating the user.</response>
        </member>
        <member name="M:TestApplication.Controllers.UserController.AddRoleToUser(TestApplication.DTO.AddUserRoleRequest)">
             <summary>
             Add a role to a user.
             </summary>
             <param name="request">Request to add a role to a user.</param>
             <remarks>
             Sample request:
            
                 POST /api/users/addRole
                 {
                     "userId": "00000000-0000-0000-0000-000000000000",
                     "roleId": "00000000-0000-0000-0000-000000000000"
                 }
             </remarks>
             <returns>Result of adding the role to the user.</returns>
             <response code="200">Role added to the user successfully.</response>
             <response code="500">An error occurred while adding the role to the user.</response>
        </member>
        <member name="M:TestApplication.Controllers.UserController.GetUser(System.Guid)">
             <summary>
             Get a user by their ID.
             </summary>
             <param name="id">The unique identifier of the user.</param>
             <remarks>
             Sample request:
            
                 GET /api/users/getUser?id=00000000-0000-0000-0000-000000000000
             </remarks>
             <returns>The user with the specified ID.</returns>
             <response code="200">User found and returned successfully.</response>
             <response code="404">User with the specified ID not found.</response>
        </member>
        <member name="M:TestApplication.Controllers.UserController.GetUsers(System.Int32,System.Int32)">
            <summary>
            Get a paginated list of users.
            </summary>
            <param name="pageNumber">The page number of the results (1-based).</param>
            <param name="pageSize">The number of users per page.</param>
            <remarks>
            </remarks>
            <returns>The user with the specified ID.</returns>
            <response code="200">List of users retrieved successfully.</response>
            <response code="400">Invalid page number or page size provided.</response>
            <response code="404">No users found.</response>
        </member>
        <member name="M:TestApplication.Controllers.UserController.FilterSortUsers(TestApplication.DTO.FilterSortUserRequest)">
             <summary>
             Filter and sort users with pagination.
             </summary>
             <param name="request">The filter and sort criteria.</param>
             <remarks>
             Sample request:
            
                 POST /api/users/filterSortUsers
                 {
                     "pageNumber": 1,
                     "pageSize": 10,
                     "filters": [
                         {
                             "param": "age",
                             "min": 20,
                             "max": 30
                         },
                         {
                             "param": "name",
                             "min": 3,
                             "max": 20
                         }
                     ],
                     "sortField": "name",
                     "sortDirection": "Ascending"
                 }
             </remarks>
             <returns>A paginated list of filtered and sorted users.</returns>
             <response code="200">Filtered and sorted users retrieved successfully.</response>
             <response code="400">Invalid page number or page size provided.</response>
             <response code="500">Error occurred while filtering/sorting users.</response>
        </member>
        <member name="M:TestApplication.Controllers.UserController.FilterSortUsersRoles(TestApplication.DTO.FilterSortRolesRequest)">
             <summary>
             Filter and sort roles with pagination.
             </summary>
             <param name="request">The filter and sort criteria.</param>
             <remarks>
             Sample request:
            
                 POST /api/users/filterSortRoles
                 {
                     "pageNumber": 1,
                     "pageSize": 10,
                     "selectedRoles": ["Admin", "Support"],
                     "sortField": "role",
                     "sortDirection": "Ascending"
                 }
             </remarks>
             <returns>A paginated list of filtered and sorted roles.</returns>
             <response code="200">Filtered and sorted roles retrieved successfully.</response>
             <response code="400">Invalid page number or page size provided.</response>
             <response code="500">Error occurred while filtering/sorting roles.</response>
        </member>
        <member name="M:TestApplication.Controllers.UserController.EditUser(TestApplication.DTO.EditUserRequest)">
             <summary>
             Edit an existing user.
             </summary>
             <param name="request">The user details to be edited.</param>
             <remarks>
             Sample request:
            
                 PUT /api/users/editUser
                 {
                     "id": "12345678-1234-1234-1234-123456789012",
                     "name": "Updated User",
                     "email": "updated@example.com",
                     "age": 35
                 }
             </remarks>
             <returns>A message indicating the result of the user edit.</returns>
             <response code="200">User edited successfully.</response>
             <response code="400">Invalid user details or non-unique email provided.</response>
             <response code="500">Error occurred while editing the user.</response>
        </member>
        <member name="M:TestApplication.Controllers.UserController.DeleteUser(System.Guid)">
             <summary>
             Delete a user by their ID.
             </summary>
             <param name="id">The ID of the user to delete.</param>
             <remarks>
             Sample request:
            
                 DELETE /api/users/deleteUser?id=12345678-1234-1234-1234-123456789012
             </remarks>
             <returns>A message indicating the result of the user deletion.</returns>
             <response code="200">User deleted successfully.</response>
             <response code="400">Invalid ID provided.</response>
             <response code="500">Error occurred while deleting the user.</response>
        </member>
        <member name="T:TestApplication.DTO.AddUserRoleRequest">
            <summary>
            Request model for adding a user to a role.
            </summary>
        </member>
        <member name="P:TestApplication.DTO.AddUserRoleRequest.UserId">
            <summary>
            Gets or sets the user's unique identifier.
            </summary>
        </member>
        <member name="P:TestApplication.DTO.AddUserRoleRequest.RoleId">
            <summary>
            Gets or sets the role's unique identifier.
            </summary>
        </member>
        <member name="T:TestApplication.DTO.CreateUserRequest">
            <summary>
            Request model for creating a new user.
            </summary>
        </member>
        <member name="P:TestApplication.DTO.CreateUserRequest.Name">
            <summary>
            Gets or sets the name of the user.
            </summary>
        </member>
        <member name="P:TestApplication.DTO.CreateUserRequest.Email">
            <summary>
            Gets or sets the email of the user.
            </summary>
        </member>
        <member name="P:TestApplication.DTO.CreateUserRequest.Age">
            <summary>
            Gets or sets the age of the user.
            </summary>
        </member>
        <member name="T:TestApplication.DTO.EditUserRequest">
            <summary>
            Request model for editing an existing user.
            </summary>
        </member>
        <member name="P:TestApplication.DTO.EditUserRequest.Id">
            <summary>
            Gets or sets the unique identifier of the user.
            </summary>
        </member>
        <member name="P:TestApplication.DTO.EditUserRequest.Name">
            <summary>
            Gets or sets the name of the user.
            </summary>
        </member>
        <member name="P:TestApplication.DTO.EditUserRequest.Email">
            <summary>
            Gets or sets the email of the user.
            </summary>
        </member>
        <member name="P:TestApplication.DTO.EditUserRequest.Age">
            <summary>
            Gets or sets the age of the user.
            </summary>
        </member>
        <member name="T:TestApplication.DTO.FilterParams">
            <summary>
            Request model for filtering data based on specified parameters.
            </summary>
        </member>
        <member name="P:TestApplication.DTO.FilterParams.Min">
            <summary>
            Gets or sets the minimum value for filtering.
            </summary>
        </member>
        <member name="P:TestApplication.DTO.FilterParams.Max">
            <summary>
            Gets or sets the maximum value for filtering.
            </summary>
        </member>
        <member name="P:TestApplication.DTO.FilterParams.Param">
            <summary>
            Gets or sets the parameter to use for filtering.
            </summary>
        </member>
        <member name="T:TestApplication.DTO.FilterSortRolesRequest">
            <summary>
            Request model for filtering and sorting roles.
            </summary>
        </member>
        <member name="P:TestApplication.DTO.FilterSortRolesRequest.SelectedRoles">
            <summary>
            Gets or sets the list of selected roles for filtering.
            </summary>
        </member>
        <member name="P:TestApplication.DTO.FilterSortRolesRequest.SortField">
            <summary>
            Gets or sets the field to use for sorting.
            </summary>
        </member>
        <member name="P:TestApplication.DTO.FilterSortRolesRequest.SortDirection">
            <summary>
            Gets or sets the sort direction (ascending or descending).
            </summary>
        </member>
        <member name="P:TestApplication.DTO.FilterSortRolesRequest.PageSize">
            <summary>
            Gets or sets the page size for pagination.
            </summary>
        </member>
        <member name="P:TestApplication.DTO.FilterSortRolesRequest.PageNumber">
            <summary>
            Gets or sets the page number for pagination.
            </summary>
        </member>
        <member name="T:TestApplication.DTO.FilterSortUserRequest">
            <summary>
            Request model for filtering and sorting users.
            </summary>
        </member>
        <member name="P:TestApplication.DTO.FilterSortUserRequest.Filters">
            <summary>
            Gets or sets the list of filter parameters for filtering users.
            </summary>
        </member>
        <member name="P:TestApplication.DTO.FilterSortUserRequest.SortField">
            <summary>
            Gets or sets the field to use for sorting.
            </summary>
        </member>
        <member name="P:TestApplication.DTO.FilterSortUserRequest.SortDirection">
            <summary>
            Gets or sets the sort direction (ascending or descending).
            </summary>
        </member>
        <member name="P:TestApplication.DTO.FilterSortUserRequest.PageSize">
            <summary>
            Gets or sets the page size for pagination.
            </summary>
        </member>
        <member name="P:TestApplication.DTO.FilterSortUserRequest.PageNumber">
            <summary>
            Gets or sets the page number for pagination.
            </summary>
        </member>
        <member name="T:TestApplication.DTO.GetUsersRequest">
            <summary>
            Request model for retrieving a list of users with pagination.
            </summary>
        </member>
        <member name="P:TestApplication.DTO.GetUsersRequest.PageSize">
            <summary>
            Gets or sets the number of users to include in each page.
            </summary>
        </member>
        <member name="P:TestApplication.DTO.GetUsersRequest.PageNumber">
            <summary>
            Gets or sets the page number to retrieve.
            </summary>
        </member>
        <member name="T:TestApplication.DTO.UserGetResponse">
            <summary>
            Response model for retrieving a user.
            </summary>
        </member>
        <member name="P:TestApplication.DTO.UserGetResponse.Id">
            <summary>
            Gets or sets the unique identifier of the user.
            </summary>
        </member>
        <member name="P:TestApplication.DTO.UserGetResponse.Name">
            <summary>
            Gets or sets the name of the user.
            </summary>
        </member>
        <member name="P:TestApplication.DTO.UserGetResponse.Email">
            <summary>
            Gets or sets the email address of the user.
            </summary>
        </member>
        <member name="P:TestApplication.DTO.UserGetResponse.Age">
            <summary>
            Gets or sets the age of the user.
            </summary>
        </member>
        <member name="P:TestApplication.DTO.UserGetResponse.Roles">
            <summary>
            Gets or sets the list of roles associated with the user.
            </summary>
        </member>
        <member name="T:TestTask.Migrations.Initial">
            <inheritdoc />
        </member>
        <member name="M:TestTask.Migrations.Initial.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:TestTask.Migrations.Initial.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:TestTask.Migrations.Initial.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
    </members>
</doc>
